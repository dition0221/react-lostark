import { useState } from "react";
import styled from "styled-components";

const Wrapper = styled.header`
  width: 100%;
  height: 48px;
  padding: 0 40px;
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const Column = styled.div`
  &:first-child {
    margin-right: 40px;
  }
  &:last-child {
    display: flex;
    flex-direction: row;
  }
`;

const Logo = styled.span`
  cursor: pointer;
`;

const Icon = styled.article`
  display: flex;
  align-items: center;
  cursor: pointer;
  svg {
    width: 20px;
    height: 20px;
  }
  span {
    padding-left: 4px;
    font-size: 13px;
    font-weight: 700;
  }
  &:not(:first-child) {
    margin-left: 16px;
  }
`;

export default function Header() {
  // style: Icon hover
  const [isHoverMenu, setIsHoverMenu] = useState(false);
  const [isHoverUser, setIsHoverUser] = useState(false);
  const toggleIconHover = (
    setterFn: React.Dispatch<React.SetStateAction<boolean>>
  ) => setterFn((prev) => !prev);

  return (
    <Wrapper>
      <Column>
        <Logo>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="80"
            height="18"
            viewBox="0 0 81 18"
          >
            <path
              d="M39.6779 0C44.6485 0 48.678 4.02935 48.678 8.99986C48.678 13.9705 44.6485 18 39.6779 18C34.7074 18 30.678 13.9705 30.678 8.99986C30.678 4.02935 34.7074 0 39.6779 0ZM8.27895 0L8.57871 0.00407024C10.0595 0.0427764 12.6249 0.367486 13.6751 1.39991C14.1097 1.82722 14.3239 2.35507 14.3239 3.03383C14.3239 4.08964 13.5918 4.87674 12.4156 4.87674C12.1865 4.87674 11.9057 4.8199 11.5769 4.73805L10.8002 4.53598L10.4502 4.4493C9.78844 4.2921 9.0173 4.15174 8.1511 4.15174L8.02524 4.15241L7.78065 4.15806C7.7008 4.16096 7.62271 4.16493 7.54657 4.17009L7.32422 4.18928C6.53196 4.27376 6.00087 4.51841 6.00087 5.09562C6.00087 5.25066 6.04314 5.40028 6.16576 5.58073C6.21378 5.65146 6.27564 5.72152 6.35141 5.78967L6.43657 5.86099C6.56742 5.96986 6.73402 6.06677 6.92987 6.15581L7.10475 6.2303L7.29305 6.3015C7.32549 6.31312 7.35846 6.32463 7.39194 6.33604L7.59864 6.40339L7.81647 6.46888L8.16209 6.5649L8.65336 6.69177L9.57634 6.92349L9.98857 7.03159L10.2667 7.10801L10.5463 7.18859L10.8266 7.27389C10.8733 7.28853 10.92 7.3034 10.9667 7.3185L11.2462 7.41196L11.5241 7.51159C13.5539 8.26615 15.378 9.56358 15.378 12.4194C15.378 16.2153 12.0634 18 7.94655 18C7.75238 18 7.55251 17.9949 7.3486 17.9847L7.03992 17.9655L6.72643 17.9385C6.62127 17.9282 6.51552 17.9166 6.40939 17.9037L6.09004 17.861C3.58269 17.496 0.978027 16.4031 0.978027 14.4807C0.978027 13.3747 1.70357 12.4208 2.87985 12.4208C3.22052 12.4208 3.60405 12.5437 4.05138 12.715L4.93001 13.0594C5.83345 13.4037 6.95759 13.7588 8.4053 13.7588C9.95056 13.7588 10.681 13.4304 10.681 12.7462C10.681 12.4194 10.5532 12.2332 10.3487 12.032C10.1167 11.8146 9.77456 11.6322 9.35741 11.4643L9.14276 11.3814L8.91658 11.3004L8.67988 11.2206L8.30721 11.102L6.95219 10.6929L6.52458 10.5585L6.09313 10.4154L5.80498 10.3141L5.51757 10.2075C5.27864 10.1162 5.04149 10.0188 4.80869 9.91375L4.53158 9.78388C2.79178 8.93688 1.36166 7.61263 1.36166 5.15479C1.36166 1.96225 4.21318 0 8.27895 0ZM74.1592 0.000520704L74.6365 0.00790706L75.2049 0.0252891L75.6186 0.0441578L76.0491 0.0700601C77.1385 0.144472 78.297 0.29454 78.8601 0.593142C79.7374 1.05844 80.2674 1.89545 80.1655 2.87564C80.0352 4.13038 79.0125 4.67175 77.7781 4.58182L77.2031 4.52714L76.7477 4.49021L76.3211 4.46073L75.8307 4.43253L75.2847 4.40814L74.894 4.39525L74.4847 4.38591L74.0593 4.38089L73.6969 4.38091L73.3547 4.38836L72.958 4.40423L72.5994 4.42445L72.335 4.44278L71.9054 4.47878L71.5999 4.50914L71.2815 4.54516C71.1087 4.56598 70.9737 4.70114 70.9484 4.8699L70.9441 4.92729V6.98263H76.6206C77.7319 6.98263 78.7016 7.88354 78.7126 8.99953C78.702 10.0796 77.7934 10.9582 76.7277 11.0137L76.6206 11.0165H70.9441V13.072C70.9441 13.2667 71.0895 13.4308 71.2815 13.454L71.601 13.4901L72.0553 13.5339L72.4734 13.5664L72.8486 13.5894L73.2701 13.6081L73.7456 13.6189L74.2738 13.6165L74.6915 13.6092L75.0918 13.598L75.4724 13.5836L76.0007 13.5577L76.4708 13.5288L77.2031 13.4722L77.658 13.4282C78.9456 13.2933 80.031 13.8285 80.1655 15.1237C80.2674 16.1037 79.7374 16.941 78.8601 17.4061C78.3345 17.6848 77.2903 17.8342 76.2677 17.9134L75.8323 17.9432L75.409 17.9655L75.0073 17.9812L74.6365 17.9915L74.1592 17.9989L73.9073 18L73.4502 17.9977L73.0249 17.991L72.6292 17.98L72.2607 17.9652L71.9172 17.9465L71.5963 17.9244L71.2957 17.899L71.0133 17.8706L70.7466 17.8394L70.371 17.7879L70.018 17.7314L69.7914 17.6913C68.7398 17.496 68.0349 17.0448 67.5671 16.4585C66.8662 15.5805 66.6946 14.4007 66.6792 13.3267L66.678 13.158V4.84109C66.678 3.72354 66.8293 2.46502 67.5671 1.5407C68.0349 0.954444 68.7398 0.503254 69.7914 0.307898L70.018 0.267861L70.371 0.211372L70.7466 0.159862L71.0133 0.128676L71.2957 0.100286L71.754 0.0634534L72.0859 0.043073L72.4417 0.0263042L72.8235 0.0133804C72.8894 0.0115598 72.9565 0.0099091 73.0249 0.00843319L73.4502 0.00171384C73.5236 0.000956449 73.5984 0.000383551 73.6746 0L74.1592 0.000520704ZM62.645 0C63.4664 0 64.878 0.753993 64.878 2.49575C64.878 6.29135 62.3225 13.9674 59.395 17.0351C58.7882 17.6709 58.0134 18.0101 57.2279 17.9998C56.4425 18.0101 55.6676 17.6709 55.0608 17.0351C52.1334 13.9674 49.578 6.29135 49.578 2.49575C49.578 0.753993 50.9458 0 51.8109 0C53.308 0 53.8125 0.970665 54.0316 2.2365L54.0684 2.46975C54.5667 5.87653 55.5872 9.08842 56.9993 12.3189L57.1942 12.7596H57.2615C58.709 9.52695 59.7707 6.32263 60.3163 2.93312L60.3874 2.46975C60.5859 1.09189 61.0571 0 62.645 0ZM23.2393 0L23.6445 0.00348471L24.037 0.0101605L24.601 0.0254875L25.1338 0.0462711L25.6339 0.0714775L26.2469 0.110179L26.7951 0.152454L27.3832 0.206589L27.8566 0.257692L28.4294 0.331652L28.5083 0.3439C29.9413 0.591784 30.7943 1.61149 30.6652 2.87909C30.5404 4.10588 29.5527 4.79123 28.3708 4.71376L27.3057 4.64222L26.0185 4.5738L25.2548 4.54076V15.9151C25.2548 17.445 24.0574 18 22.9221 18C21.8456 18 20.7818 17.4781 20.7184 16.0515L20.7154 15.9151V4.54066L19.6112 4.59463L17.7653 4.70346C16.5308 4.83538 15.5191 4.14705 15.3901 2.87937C15.2649 1.65 16.1252 0.632501 17.4322 0.366609L17.6083 0.336061L18.2296 0.258228L18.715 0.207107L19.3132 0.152888L20.0143 0.100386L20.4802 0.071712L20.9772 0.0464294L21.5034 0.0255784L22.0565 0.0101989L22.439 0.00349918L22.832 1.68213e-06L23.2393 0ZM39.678 4.5C37.1927 4.5 35.178 6.51463 35.178 8.99982C35.178 11.4852 37.1927 13.5 39.678 13.5C42.1634 13.5 44.178 11.4852 44.178 8.99982C44.178 6.51463 42.1634 4.5 39.678 4.5Z"
              fill="#FC4420"
            />
          </svg>
        </Logo>
      </Column>

      <Column>
        <Icon
          onMouseEnter={() => toggleIconHover(setIsHoverMenu)}
          onMouseLeave={() => toggleIconHover(setIsHoverMenu)}
        >
          {isHoverMenu ? (
            <svg
              style={{ stroke: "black", strokeWidth: 15 }}
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 512 512"
            >
              <path d="M0,54.9C0,24.6,24.6,0,54.9,0h109.7c30.3,0,54.9,24.6,54.9,54.9v109.7c0,30.3-24.6,54.9-54.9,54.9H54.9   C24.6,219.4,0,194.9,0,164.6V54.9z M292.6,54.9c0-30.3,24.6-54.9,54.9-54.9h109.7C487.4,0,512,24.6,512,54.9v109.7   c0,30.3-24.6,54.9-54.9,54.9H347.4c-30.3,0-54.9-24.6-54.9-54.9V54.9z M0,347.4c0-30.3,24.6-54.9,54.9-54.9h109.7   c30.3,0,54.9,24.6,54.9,54.9v109.7c0,30.3-24.6,54.9-54.9,54.9H54.9C24.6,512,0,487.4,0,457.1V347.4z M292.6,347.4   c0-30.3,24.6-54.9,54.9-54.9h109.7c30.3,0,54.9,24.6,54.9,54.9v109.7c0,30.3-24.6,54.9-54.9,54.9H347.4   c-30.3,0-54.9-24.6-54.9-54.9V347.4z" />
            </svg>
          ) : (
            <svg
              style={{ stroke: "black", strokeWidth: 15 }}
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 512 512"
            >
              <path d="M0,54.9C0,24.6,24.6,0,54.9,0h109.7c30.3,0,54.9,24.6,54.9,54.9v109.7c0,30.3-24.6,54.9-54.9,54.9H54.9   C24.6,219.4,0,194.9,0,164.6V54.9z M54.9,36.6c-10.1,0-18.3,8.2-18.3,18.3v109.7c0,10.1,8.2,18.3,18.3,18.3h109.7   c10.1,0,18.3-8.2,18.3-18.3V54.9c0-10.1-8.2-18.3-18.3-18.3H54.9z M292.6,54.9c0-30.3,24.6-54.9,54.9-54.9h109.7   C487.4,0,512,24.6,512,54.9v109.7c0,30.3-24.6,54.9-54.9,54.9H347.4c-30.3,0-54.9-24.6-54.9-54.9V54.9z M347.4,36.6   c-10.1,0-18.3,8.2-18.3,18.3v109.7c0,10.1,8.2,18.3,18.3,18.3h109.7c10.1,0,18.3-8.2,18.3-18.3V54.9c0-10.1-8.2-18.3-18.3-18.3   H347.4z M0,347.4c0-30.3,24.6-54.9,54.9-54.9h109.7c30.3,0,54.9,24.6,54.9,54.9v109.7c0,30.3-24.6,54.9-54.9,54.9H54.9   C24.6,512,0,487.4,0,457.1V347.4z M54.9,329.1c-10.1,0-18.3,8.2-18.3,18.3v109.7c0,10.1,8.2,18.3,18.3,18.3h109.7   c10.1,0,18.3-8.2,18.3-18.3V347.4c0-10.1-8.2-18.3-18.3-18.3H54.9z M292.6,347.4c0-30.3,24.6-54.9,54.9-54.9h109.7   c30.3,0,54.9,24.6,54.9,54.9v109.7c0,30.3-24.6,54.9-54.9,54.9H347.4c-30.3,0-54.9-24.6-54.9-54.9V347.4z M347.4,329.1   c-10.1,0-18.3,8.2-18.3,18.3v109.7c0,10.1,8.2,18.3,18.3,18.3h109.7c10.1,0,18.3-8.2,18.3-18.3V347.4c0-10.1-8.2-18.3-18.3-18.3   H347.4z" />
            </svg>
          )}
        </Icon>
        <Icon
          onMouseEnter={() => toggleIconHover(setIsHoverUser)}
          onMouseLeave={() => toggleIconHover(setIsHoverUser)}
        >
          {isHoverUser ? (
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <path d="M399 384.2C376.9 345.8 335.4 320 288 320H224c-47.4 0-88.9 25.8-111 64.2c35.2 39.2 86.2 63.8 143 63.8s107.8-24.7 143-63.8zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm256 16a72 72 0 1 0 0-144 72 72 0 1 0 0 144z" />
            </svg>
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <path d="M406.5 399.6C387.4 352.9 341.5 320 288 320H224c-53.5 0-99.4 32.9-118.5 79.6C69.9 362.2 48 311.7 48 256C48 141.1 141.1 48 256 48s208 93.1 208 208c0 55.7-21.9 106.2-57.5 143.6zm-40.1 32.7C334.4 452.4 296.6 464 256 464s-78.4-11.6-110.5-31.7c7.3-36.7 39.7-64.3 78.5-64.3h64c38.8 0 71.2 27.6 78.5 64.3zM256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-272a40 40 0 1 1 0-80 40 40 0 1 1 0 80zm-88-40a88 88 0 1 0 176 0 88 88 0 1 0 -176 0z" />
            </svg>
          )}
          <span>로그인</span>
        </Icon>
      </Column>
    </Wrapper>
  );
}
